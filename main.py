import os
import logging
from openai import OpenAI
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import Update, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from fastapi import FastAPI, Request
import asyncio
import httpx
import uvicorn

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.environ.get("PORT", 10000))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º PORT –æ—Ç Render

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API-–∫–ª—é—á–∏
if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
if not OPENAI_API_KEY:
    raise ValueError("–û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# URL –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"https://chatbot-cfr8.onrender.com/webhook"
PING_URL = "https://chatbot-cfr8.onrender.com/ping"

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
async def set_webhook():
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

# Keep-Alive (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
async def keep_awake():
    await asyncio.sleep(5)
    while True:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(PING_URL)
                logging.info(f"Keep-alive ping sent: {response.status_code}")
        except Exception as e:
            logging.error(f"Keep-alive error: {e}")
        await asyncio.sleep(30)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")],
        [KeyboardButton(text="‚öô –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"), KeyboardButton(text="üíæ –ó–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏")],
        [KeyboardButton(text="‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"), KeyboardButton(text="üîÑ –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")]
    ],
    resize_keyboard=True
)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
@app.on_event("startup")
async def startup():
    await set_webhook()
    asyncio.create_task(keep_awake())

@app.on_event("shutdown")
async def shutdown():
    await bot.delete_webhook()
    logging.info("Webhook —É–¥–∞–ª—ë–Ω")

# –ú–∞—Ä—à—Ä—É—Ç –≤–µ–±—Ö—É–∫–∞
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        update = await request.json()
        telegram_update = Update.model_validate(update)
        await dp.feed_update(bot, telegram_update)
        return {"status": "ok"}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return {"status": "error", "message": str(e)}

# –î–æ–±–∞–≤–ª—è–µ–º /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.get("/ping")
async def ping():
    return {"status": "I'm awake!"}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start_handler(message: types.Message):
    try:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –Ω–∞ –±–∞–∑–µ ChatGPT. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é.")

@router.message(lambda message: message.text == "‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
async def info_handler(message: types.Message):
    try:
        info_text = (
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ ChatGPT.\n\n"
            "üìå –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "üîπ –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò.\n"
            "üîπ –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –º–æ–¥–µ–ª—å ChatGPT.\n"
            "üîπ –ú–æ–∂–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞.\n"
            "üîπ –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
            "üîπ –†–∞–±–æ—Ç–∞–µ—Ç –≤ Telegram —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫."
        )
        await message.answer(info_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

# –ó–∞–ø—É—Å–∫ FastAPI
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ FastAPI...")
    uvicorn.run(app, host="0.0.0.0", port=PORT)

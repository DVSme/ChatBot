import os
import logging
from openai import OpenAI
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import Update
from fastapi import FastAPI, Request
import asyncio
import httpx
import uvicorn

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
#load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

print(f"‚úÖ TELEGRAM_BOT_TOKEN: {TOKEN}")
print(f"‚úÖ OPENAI_API_KEY: {OPENAI_API_KEY[:5]}...")  # –í—ã–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ API-–∫–ª—é—á–∏
if not TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
if not OPENAI_API_KEY:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –°–æ–∑–¥–∞—ë–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# URL –≤–µ–±—Ö—É–∫–∞
WEBHOOK_URL = f"https://chatbot-cfr8.onrender.com/webhook"

# –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞)
@app.get("/")
async def root():
    return {"message": "‚úÖ Bot is running!"}

# –ü–∏–Ω–≥ –¥–ª—è –ø–æ–¥—ä–µ–º–∞
@app.get("/ping")
async def ping():
    return {"status": "I'm awake!"}

# –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –≤–µ–±—Ö—É–∫–∞
@app.post("/webhook")
async def telegram_webhook(request: Request):
    update = await request.json()
    telegram_update = Update.model_validate(update)  # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    await dp.process_update(telegram_update)
    return {"status": "ok"}

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup():
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

@app.on_event("shutdown")
async def shutdown():
    await bot.delete_webhook()
    logging.info("‚úÖ Webhook —É–¥–∞–ª—ë–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å ChatGPT

client = OpenAI(api_key=OPENAI_API_KEY)

@router.message()
async def chatgpt_handler(message: types.Message):
    try:
        user_input = message.text
        logging.info(f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª: {user_input}")

        # API –≤—ã–∑–æ–≤ OpenAI
        response = client.chat.completions.create(
           model="gpt-4o-mini",
           messages=[{"role": "user", "content": user_input}]
        )  

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
        bot_response = response.choices[0].message.content

        logging.info(f"ü§ñ –û—Ç–≤–µ—Ç ChatGPT: {bot_response}")

        await message.answer(bot_response)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
# –ü–æ–¥—ä–µ–º –±–æ—Ç–∞
async def keep_awake():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(WEBHOOK_URL + "/ping")
                logging.info(f"üîÑ Keep-alive ping sent: {response.status_code}")
        except Exception as e:
            logging.error(f"‚ùå Keep-alive error: {e}")

        await asyncio.sleep(600)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (600 —Å–µ–∫—É–Ω–¥)

@app.on_event("startup")
async def startup():
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    asyncio.create_task(keep_awake())  

# –ó–∞–ø—É—Å–∫ FastAPI
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ FastAPI...")
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))